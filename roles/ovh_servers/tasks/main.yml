- debug: var=cloud
- os_keypair:
    cloud: "{{ cloud.name }}"
    state: absent
    name: "{{ admin.key }}"

- os_keypair:
    state: present
    cloud: "{{ cloud.name }}"
    name: "{{ admin.key }}"
    public_key_file: "{{ cloud.sshkey.public_key_file }}"

- name: Create Vlans
  ovh_networks: description="{{ cloud.project }}" project_name="{{ cloud.project }}" name="{{ item.name }}" id="{{ item.id }}" region="{{ item.region }}" cidr="{{ item.cidr }}" start_ip="{{ item.start }}" end_ip="{{ item.end }}" state=present
  with_items: "{{ vlans }}"
 
- name: Create Security group for admin VM
  os_security_group: state=present name={{ admin.security_group }} description="Admin firewall rules" cloud={{ cloud.name }}

- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ admin.security_group }}"
    protocol: udp
    port_range_min: "{{ item }}"
    port_range_max: "{{ item }}"
    remote_ip_prefix: 0.0.0.0/0
  with_items: "{{ admin.udp }}"


- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ admin.security_group }}"
    protocol: tcp
    port_range_min: "{{ item }}"
    port_range_max: "{{ item }}"
    remote_ip_prefix: 0.0.0.0/0
  with_items: "{{ admin.tcp }}"

- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ admin.security_group }}"
    protocol: icmp
    remote_ip_prefix: 0.0.0.0/0

- name: Create Security group for dev
  os_security_group: state=present name={{ dev.security_group }} description="DEV firewall rules" cloud={{ cloud.name }}

- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ dev.security_group }}"
    protocol: tcp
    port_range_min: "{{ item }}"
    port_range_max: "{{ item }}"
    remote_ip_prefix: 0.0.0.0/0
  with_items: "{{ dev.tcp }}"

- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ dev.security_group }}"
    protocol: icmp
    remote_ip_prefix: 0.0.0.0/0

- name: Create Security group for prd
  os_security_group: state=present name={{ prod.security_group }} description="PRD firewall rules" cloud={{ cloud.name }}

- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ prod.security_group }}"
    protocol: tcp
    port_range_min: "{{ item }}"
    port_range_max: "{{ item }}"
    remote_ip_prefix: 0.0.0.0/0
  with_items: "{{ prod.tcp }}"

- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ prod.security_group }}"
    protocol: icmp
    remote_ip_prefix: 0.0.0.0/0

- name: Create Admin VM
  os_server:
    cloud: "{{ cloud.name }}"
    state: present
    name: "{{ admin.name }}"
    region_name: "{{ openrc.openrc.region_name }}"
    image: "{{ admin.os }}"
    key_name: "{{ admin.key }}"
    flavor: "{{ admin.flavor }}"
    security_groups: "{{ admin.security_group }}"
    nics: "{{ admin.nics }}"
    #network: "Ext-Net"
    auto_ip: yes
    wait: yes
    userdata: "#!/bin/bash \n apt-get update \n apt-get install -y python python-pip \n pip install shade docker-py \n echo '127.0.0.1 admin-vm' >> /etc/hosts \n curl -sSL https://get.docker.com/ | sh \n sudo usermod -aG docker ubuntu \n sudo service docker start \n sleep 5 \n sudo docker network create -d bridge admin-net" 
    meta: "env=admin"
  register: adminvm

- debug: var=adminvm

- name: Add created instance to Inventory
  add_host: name={{ adminvm.openstack.public_v4 }} groups=softwarefactory ansible_ssh_host={{ adminvm.openstack.public_v4 }} ansible_become=true

- name: Create DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=admin-vm type=A value={{ adminvm.openstack.public_v4 }}
  tags: dns

- name: Create DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=admin type=A value={{ adminvm.openstack.public_v4 }}
  tags: dns

- name: Create DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=* type=A value={{ adminvm.openstack.public_v4 }}
  tags: dns


- name: Create Docker Swarm Manager
  os_server:
    cloud: "{{ cloud.name }}"
    state: present
    name: dev-swarm-master
    region_name: "{{ openrc.openrc.region_name }}"
    image: "{{ dev.os }}"
    key_name: "{{ dev.key }}"
    flavor: "{{ dev.flavor }}"
    security_groups: "{{ dev.security_group }}"
    nics: "{{ dev.nics }}"
    auto_ip: yes
    wait: yes
    userdata: "#!/bin/bash \n apt-get update \n apt-get install -y python python-pip \n pip install docker-py \n echo '127.0.0.1 dev-swarm-master' >> /etc/hosts \n pip install shade \n curl -sSL https://get.docker.com/ | sh \n sudo usermod -aG docker ubuntu \n sudo service docker start" 
  register: devswarmmastervm

- name: Add created instance to Inventory
  add_host: name={{ devswarmmastervm.openstack.public_v4 }} groups=docker_swarm_manager ansible_ssh_host={{ devswarmmastervm.openstack.public_v4 }} ansible_become=true

- name: Add created instance to Inventory
  add_host: name={{ devswarmmastervm.openstack.public_v4 }} groups=swarm-cluster ansible_ssh_host={{ devswarmmastervm.openstack.public_v4 }} ansible_become=true

- name: Create DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=dev-swarm-master type=A value={{ devswarmmastervm.openstack.public_v4 }}
  tags: dns

- name: Create AAAA DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=dev-swarm-master type=AAAA value={{ devswarmmastervm.openstack.public_v6 }}
  tags: dns

- name: Create Docker Swarm Node
  os_server:
    cloud: "{{ cloud.name }}"
    state: present
    name: dev-swarm-node-1
    region_name: "{{ openrc.openrc.region_name }}"
    image: "{{ dev.os }}"
    key_name: "{{ dev.key }}"
    flavor: "{{ dev.flavor }}"
    security_groups: "{{ dev.security_group }}"
    nics: "{{ dev.nics }}"
    auto_ip: yes
    wait: yes
    userdata: "#!/bin/bash \n apt-get update \n apt-get install -y python python-pip \n pip install docker-py \n echo '127.0.0.1 dev-swarm-node-1' >> /etc/hosts \n pip install shade \n curl -sSL https://get.docker.com/ | sh \n sudo usermod -aG docker ubuntu \n sudo service docker start" 
  register: devswarmnodevm

- name: Add created instance to Inventory
  add_host: name={{ devswarmnodevm.openstack.public_v4 }} groups=docker_swarm_manager ansible_ssh_host={{ devswarmnodevm.openstack.public_v4 }} ansible_become=true

- name: Add created instance to Inventory
  add_host: name={{ devswarmnodevm.openstack.public_v4 }} groups=swarm-cluster ansible_ssh_host={{ devswarmnodevm.openstack.public_v4 }} ansible_become=true

- name: Create DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=dev-swarm-node-1 type=A value={{ devswarmnodevm.openstack.public_v4 }}
  tags: dns

- name: Create AAAA DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=dev-swarm-node-1 type=AAAA value={{ devswarmnodevm.openstack.public_v6 }}
  tags: dns

- name: Create Docker Swarm Manager
  os_server:
    cloud: "{{ cloud.name }}"
    state: present
    name: prod-swarm-master
    region_name: "{{ openrc.openrc.region_name }}"
    image: "{{ prod.os }}"
    key_name: "{{ prod.key }}"
    flavor: "{{ prod.flavor }}"
    security_groups: "{{ prod.security_group }}"
    nics: "{{ prod.nics }}"
    auto_ip: yes
    wait: yes
    userdata: "#!/bin/bash \n apt-get update \n apt-get install -y python python-pip \n pip install docker-py \n echo '127.0.0.1 prod-swarm-master' >> /etc/hosts \n pip install shade \n curl -sSL https://get.docker.com/ | sh \n sudo usermod -aG docker ubuntu \n sudo service docker start" 
  register: prodswarmmastervm

- name: Add created instance to Inventory
  add_host: name={{ prodswarmmastervm.openstack.public_v4 }} groups=docker_swarm_manager ansible_ssh_host={{ prodswarmmastervm.openstack.public_v4 }} ansible_become=true

- name: Add created instance to Inventory
  add_host: name={{ prodswarmmastervm.openstack.public_v4 }} groups=swarm-cluster ansible_ssh_host={{ prodswarmmastervm.openstack.public_v4 }} ansible_become=true

- name: Create DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=prod-swarm-master type=A value={{ prodswarmmastervm.openstack.public_v4 }}
  tags: dns

- name: Create AAAA DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=prod-swarm-master type=AAAA value={{ prodswarmmastervm.openstack.public_v6 }}
  tags: dns

- name: Create Docker Swarm Node
  os_server:
    cloud: "{{ cloud.name }}"
    state: present
    name: prod-swarm-node-1
    region_name: "{{ openrc.openrc.region_name }}"
    image: "{{ prod.os }}"
    key_name: "{{ prod.key }}"
    flavor: "{{ prod.flavor }}"
    security_groups: "{{ prod.security_group }}"
    nics: "{{ prod.nics }}"
    auto_ip: yes
    wait: yes
    userdata: "#!/bin/bash \n apt-get update \n apt-get install -y python python-pip \n pip install docker-py \n echo '127.0.0.1 prod-swarm-node-1' >> /etc/hosts \n pip install shade \n curl -sSL https://get.docker.com/ | sh \n sudo usermod -aG docker ubuntu \n sudo service docker start" 
  register: prodswarmnodevm

- name: Add created instance to Inventory
  add_host: name={{ prodswarmnodevm.openstack.public_v4 }} groups=docker_swarm_manager ansible_ssh_host={{ prodswarmnodevm.openstack.public_v4 }} ansible_become=true

- name: Add created instance to Inventory
  add_host: name={{ prodswarmnodevm.openstack.public_v4 }} groups=swarm-cluster ansible_ssh_host={{ prodswarmnodevm.openstack.public_v4 }} ansible_become=true

- name: Create DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=prod-swarm-node-1 type=A value={{ prodswarmnodevm.openstack.public_v4 }}
  tags: dns

- name: Create AAAA DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=prod-swarm-node-1 type=AAAA value={{ prodswarmnodevm.openstack.public_v6 }}
  tags: dns

- name: Wait for VM to start and install first requirements
  pause: seconds=300

- name: Create inventory file
  template: src=ansible_hosts.j2 dest=./ansible_hosts
