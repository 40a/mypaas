- debug: var=cloud
- os_keypair:
    cloud: "{{ cloud.name }}"
    state: absent
    name: "{{ admin.key }}"

- os_keypair:
    state: present
    cloud: "{{ cloud.name }}"
    name: "{{ admin.key }}"
    public_key_file: "{{ cloud.sshkey.public_key_file }}"

- name: Create Security group for admin VM
  os_security_group: state=present name={{ admin.security_group }} description="Admin firewall rules" cloud={{ cloud.name }}

- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ admin.security_group }}"
    protocol: udp
    port_range_min: "{{ item }}"
    port_range_max: "{{ item }}"
    remote_ip_prefix: 0.0.0.0/0
  with_items: "{{ admin.udp }}"


- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ admin.security_group }}"
    protocol: tcp
    port_range_min: "{{ item }}"
    port_range_max: "{{ item }}"
    remote_ip_prefix: 0.0.0.0/0
  with_items: "{{ admin.tcp }}"

- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ admin.security_group }}"
    protocol: icmp
    remote_ip_prefix: 0.0.0.0/0


- name: Create Security group for dev
  os_security_group: state=present name={{ dev.security_group }} description="DEV firewall rules" cloud={{ cloud.name }}

- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ dev.security_group }}"
    protocol: tcp
    port_range_min: "{{ item }}"
    port_range_max: "{{ item }}"
    remote_ip_prefix: 0.0.0.0/0
  with_items: "{{ dev.tcp }}"

- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ dev.security_group }}"
    protocol: icmp
    remote_ip_prefix: 0.0.0.0/0

- name: Create Security group for prd
  os_security_group: state=present name={{ prd.security_group }} description="PRD firewall rules" cloud={{ cloud.name }}

- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ prd.security_group }}"
    protocol: tcp
    port_range_min: "{{ item }}"
    port_range_max: "{{ item }}"
    remote_ip_prefix: 0.0.0.0/0
  with_items: "{{ prd.tcp }}"

- os_security_group_rule:
    cloud: "{{ cloud.name }}"
    security_group: "{{ prd.security_group }}"
    protocol: icmp
    remote_ip_prefix: 0.0.0.0/0

- name: Create Admin VM
  os_server:
    cloud: "{{ cloud.name }}"
    state: present
    name: "{{ admin.name }}"
    region_name: "{{ openrc.openrc.region_name }}"
    image: "{{ admin.os }}"
    key_name: "{{ admin.key }}"
    flavor: "{{ admin.flavor }}"
    security_groups: "{{ admin.security_group }}"
    network: "{{ cluster.ext_network }}"
    auto_ip: yes
    wait: yes
    userdata: "#!/bin/bash \n apt-get update \n apt-get install -y python python-pip \n pip install shade docker-py \n echo '127.0.0.1 admin-vm' >> /etc/hosts \n curl -sSL https://get.docker.com/ | sh \n sudo usermod -aG docker ubuntu \n sudo service docker start \n sleep 5 \n sudo docker network create -d bridge admin-net" 
    meta: "env=admin"
  register: adminvm

- debug: var=adminvm

- name: Add created instance to Inventory
  add_host: name={{ adminvm.openstack.interface_ip }} groups=softwarefactory ansible_ssh_host={{ adminvm.openstack.interface_ip }} ansible_become=true

- name: Create DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=admin-vm type=A value={{ adminvm.openstack.interface_ip }}
  tags: dns

- name: Create DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=admin type=A value={{ adminvm.openstack.interface_ip }}
  tags: dns

- name: Create DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=* type=A value={{ adminvm.openstack.interface_ip }}
  tags: dns


- name: Create Docker Swarm Manager
  os_server:
    cloud: "{{ cloud.name }}"
    state: present
    name: swarm-master
    region_name: "{{ openrc.openrc.region_name }}"
    image: "{{ cluster.os }}"
    key_name: "{{ cluster.key }}"
    flavor: "{{ cluster.flavor }}"
    security_groups: "{{ dev.security_group }}"
    network: "{{ cluster.ext_network }}"
    auto_ip: yes
    wait: yes
    userdata: "#!/bin/bash \n apt-get update \n apt-get install -y python python-pip \n pip install docker-py \n echo '127.0.0.1 swarm-master' >> /etc/hosts \n pip install shade \n curl -sSL https://get.docker.com/ | sh \n sudo usermod -aG docker ubuntu \n sudo service docker start" 
  register: swarmmastervm

- name: Add created instance to Inventory
  add_host: name={{ swarmmastervm.openstack.interface_ip }} groups=docker_swarm_manager ansible_ssh_host={{ swarmmastervm.openstack.interface_ip }} ansible_become=true

- name: Add created instance to Inventory
  add_host: name={{ swarmmastervm.openstack.interface_ip }} groups=swarm-cluster ansible_ssh_host={{ swarmmastervm.openstack.interface_ip }} ansible_become=true

- name: Create DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=swarm-master type=A value={{ swarmmastervm.openstack.interface_ip }}
  tags: dns

- name: Create Docker Swarm Node
  os_server:
    cloud: "{{ cloud.name }}"
    state: present
    name: swarm-node-1
    region_name: "{{ openrc.openrc.region_name }}"
    image: "{{ cluster.os }}"
    key_name: "{{ cluster.key }}"
    flavor: "{{ cluster.flavor }}"
    security_groups: "{{ dev.security_group }}"
    network: "{{ cluster.ext_network }}"
    auto_ip: yes
    wait: yes
    userdata: "#!/bin/bash \n apt-get update \n apt-get install -y python python-pip \n pip install docker-py \n echo '127.0.0.1 swarm-node-1' >> /etc/hosts \n pip install shade \n curl -sSL https://get.docker.com/ | sh \n sudo usermod -aG docker ubuntu \n sudo service docker start" 
  register: swarmnodevm

- name: Add created instance to Inventory
  add_host: name={{ swarmnodevm.openstack.interface_ip }} groups=docker_swarm_manager ansible_ssh_host={{ swarmnodevm.openstack.interface_ip }} ansible_become=true

- name: Add created instance to Inventory
  add_host: name={{ swarmnodevm.openstack.interface_ip }} groups=swarm-cluster ansible_ssh_host={{ swarmnodevm.openstack.interface_ip }} ansible_become=true

- name: Create DNS entry
  ovh_dns: state=present domain={{ tld_hostname }} name=swarm-node-1 type=A value={{ swarmnodevm.openstack.interface_ip }}
  tags: dns

- name: Wait for VM to start and install first requirements
  pause: seconds=300

- name: Create inventory file
  template: src=ansible_hosts.j2 dest=./ansible_hosts
